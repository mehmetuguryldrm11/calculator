import org.bytedeco.ffmpeg.global.avcodec;
import org.bytedeco.javacv.FFmpegFrameRecorder;
import org.bytedeco.javacv.FFmpegLogCallback;
import org.bytedeco.javacv.FrameRecorder.Exception;

import javax.sound.sampled.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.ShortBuffer;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class MicrophoneCapture
{

    final private static int AUDIO_DEVICE_INDEX = 4;
    final private static String outputFile = "muy.wav";


    public static void main(String[] args) throws Exception
    {

        final FFmpegFrameRecorder recorder = new FFmpegFrameRecorder(outputFile,2);


        recorder.setAudioChannels(2);
        recorder.setInterleaved(true);
        recorder.setFormat("wav");
        recorder.setAudioOption("crf", "0");
        recorder.setAudioQuality(0);
        recorder.setAudioBitrate(192000);
        recorder.setSampleRate(44100);
        recorder.setAudioCodec(avcodec.AV_CODEC_ID_AAC);
        recorder.start();

        new Thread(() -> {
            AudioFormat audioFormat = new AudioFormat(44100.0F, 16, 2, true, false);

            Mixer.Info[] minfoSet = AudioSystem.getMixerInfo();
            Mixer mixer = AudioSystem.getMixer(minfoSet[AUDIO_DEVICE_INDEX]);
            DataLine.Info dataLineInfo = new DataLine.Info(TargetDataLine.class, audioFormat);
            FFmpegLogCallback.set();
            try
            {
                final TargetDataLine line = (TargetDataLine)AudioSystem.getLine(dataLineInfo);
                line.open(audioFormat);
                line.start();

                final int sampleRate = (int) audioFormat.getSampleRate();
                final int numChannels = audioFormat.getChannels();

                final int audioBufferSize = sampleRate * numChannels;
                final byte[] audioBytes = new byte[audioBufferSize];

                ScheduledThreadPoolExecutor exec = new ScheduledThreadPoolExecutor(1);
                exec.scheduleAtFixedRate(() -> {
                    try
                    {
                        int nBytesRead = 0;
                        while (nBytesRead == 0) {
                            nBytesRead = line.read(audioBytes, 0, line.available());
                        }

                        int nSamplesRead = nBytesRead / 2;
                        short[] samples = new short[nSamplesRead];
                        ByteBuffer.wrap(audioBytes).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(samples);
                        ShortBuffer sBuff = ShortBuffer.wrap(samples, 0, nSamplesRead);
                        recorder.recordSamples(sampleRate, numChannels, sBuff);
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }
                }, 0,  200 , TimeUnit.MILLISECONDS);
            }
            catch (LineUnavailableException e1)
            {
                e1.printStackTrace();
            }
        }).start();
        recorder.stop();
    }
}
