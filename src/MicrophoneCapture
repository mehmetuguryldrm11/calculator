import org.bytedeco.ffmpeg.global.avcodec;
import org.bytedeco.javacv.FFmpegFrameRecorder;
import org.bytedeco.javacv.FrameRecorder.Exception;

import javax.sound.sampled.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.ShortBuffer;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;



public class MicrophoneCapture
{


    final private static String outputFile = "Muyyy.mp3";


    public static void main(String[] args) throws FFmpegFrameRecorder.Exception {

        final FFmpegFrameRecorder recorder = new FFmpegFrameRecorder(outputFile,2);

        recorder.setAudioChannels(2);
        recorder.setInterleaved(true);
        recorder.setFormat("mp3");
        recorder.setAudioOption("crf", "0");
        recorder.setAudioQuality(0);
        recorder.setAudioBitrate(192000);
        recorder.setSampleRate(44100);
        recorder.setAudioCodec(avcodec.AV_CODEC_ID_AAC);

        new Thread(new Runnable() {
            @Override
            public void run()
            {
                AudioFormat audioFormat = new AudioFormat(44100.0F, 20, 2, true, false);


                Mixer.Info[] minfoSet = AudioSystem.getMixerInfo();
                Mixer mixer = AudioSystem.getMixer(minfoSet[4]);

                DataLine.Info dataLineInfo = new DataLine.Info(SourceDataLine.class, audioFormat);

                try
                {
                    SourceDataLine line = (SourceDataLine) mixer.getLine(dataLineInfo);
                    line.open(audioFormat);
                    line.start();

                    int sampleRate = (int) audioFormat.getSampleRate();
                    int numChannels = audioFormat.getChannels();


                    int audioBufferSize = sampleRate * numChannels;
                    byte[] audioBytes = new byte[audioBufferSize];

                    ScheduledThreadPoolExecutor exec = new ScheduledThreadPoolExecutor(1);
                    exec.scheduleAtFixedRate(new Runnable() {

                        @Override
                        public void run()
                        {
                            try {
                                // Read from the line... non-blocking
                                int nBytesRead = line.write(audioBytes, 0, line.available());


                                int nSamplesRead = nBytesRead / 2;
                                short[] samples = new short[nSamplesRead];

                                ByteBuffer.wrap(audioBytes).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(samples);
                                ShortBuffer sBuff = ShortBuffer.wrap(samples, 0, nSamplesRead);

                                recorder.recordSamples(sampleRate, numChannels, sBuff);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }, 0, 1000 , TimeUnit.MILLISECONDS);
                }
                catch (LineUnavailableException e1)
                {
                    e1.printStackTrace();
                }

            }
        }).start();
        recorder.stop();
    }
}
